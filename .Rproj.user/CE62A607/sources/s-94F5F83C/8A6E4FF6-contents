---
title: "Power Market Survey"
output:
  html_document:
    toc: true
    toc_float: true

---
\newpage

```{r Libraries, include=FALSE}
library("shinydashboard")
library("shinyWidgets")
library("lubridate")
library("easycsv")
library("rmarkdown")
library("dplyr")
library("plotly")
library("shinyBS")
library("DT")
library("shinyjs")
library("knitr")
# library("kableExtra")
library('htmlTable')
library('htmltools')

```

```{r Helper Functions, include=FALSE}
source('R/helper_func_var.R')
```

```{r Configuration, include=FALSE}
# Read Saved Configuration Setting
load("Config/config.RData")
growth_rate_df <- read.csv("Config/growth_rate_df.csv")
row.names(growth_rate_df) <- Disco_List
growth_rate_df <- growth_rate_df[,-1]
```

```{r Figures & Tables, echo=FALSE}
  l <- htmltools::tagList()
  iter =1
  System_peak_demand_df<- NULL

  for (o in 1:length(Disco_List))
  {
      select_disco_db = Disco_List[o]
      file_name = paste(select_disco_db,"-",base_year,"-Planned Load Data.csv", sep = "")	
      file_path = paste(Data_dir, file_name, sep = "")	
      ##################################### Compute Peak Demand Figure

      if (file.exists(file_path))	
      {	 
        l[[inc(iter)]] <- h1(select_disco_db)
      
        df <- read.csv(file_path)	
        #remove NA's
        df <-  df[!is.na(df$area_type),]
        df <-  df[!is.na(df$area),]

        # pd_input
        peak_demand_input<- data.frame(sind_cf=sind_cf, ptub_cf=ptub_cf,
                                              
                                              sub_area1_cf=sub_area1_cf, sub_area2_cf=sub_area2_cf,
                                              
                                              sub_area3_cf = sub_area3_cf, area_cf=area_cf,
                                              
                                              disco_cf_pd = disco_cf_pd, trans_losses_pd = trans_losses_pd,
                                              dist_losses_pd = dist_losses_pd)
        # get peak_demand for base_year
        pd_base_year <- calculate_base_year_peak_demand(df,peak_demand_input)
        
        #get growth rate for selected DISCO
        selected_disco <-select_disco_db
        
        #get growth rate for selected disco
        growth_rate_for_each_category = data.frame(matrix(ncol = length(categories_var), nrow =1))
        colnames(growth_rate_for_each_category)  <- categories_var
        gr <- (growth_rate_df)
        for (i in (1:length(categories_var)))
        {
          growth_rate_for_each_category[[categories_var[i]]] =   gr[selected_disco,categories_var[i]]
          
        }
        start_year <-as.numeric(base_year)
        
        # forecast using cagr
        pd_forecast <-
          forecast_using_cagr (
            pd_base_year,
            growth_rate_for_each_category,
            as.numeric(no_of_years),
            start_year
          )
        
        #Converting Peak demand from Mega to kilo 
        
        # Calculate Total Energy 
        pd_forecast$total_energy = rowSums(pd_forecast[,categories_var])

        # calculate dist and trans loss
        for (i in 2:nrow(pd_forecast)){
        pd_forecast$trans_loss[i]  <- pd_forecast$trans_loss[i-1]- pd_forecast$trans_loss[i-1] *(peak_demand_input$trans_losses_pd/100)
        pd_forecast$dist_loss[i]  <- pd_forecast$dist_loss[i-1]- pd_forecast$dist_loss[i-1] *(peak_demand_input$dist_losses_pd/100)
        }
        
        # Calculate loss percantage
        pd_forecast$dist_loss_percentage <- pd_forecast$dist_loss/pd_forecast$total_energy*100
        pd_forecast$trans_loss_percentage <- pd_forecast$trans_loss/pd_forecast$total_energy *100
        
        pd_forecast$total_loss = pd_forecast$dist_loss + pd_forecast$trans_loss
        pd_forecast$total_loss_percentage = pd_forecast$dist_loss_percentage + pd_forecast$trans_loss_percentage
        
        # Calculate energy_sent_out
        pd_forecast$energy_sent_out <-pd_forecast$total_energy/(1-(pd_forecast$total_loss_percentage/100))
        # Calculate peak demand
        Load_factor_percentage = (pd_forecast$energy_sent_out[1] )/ (pd_forecast$peak[1] * 8760)*100
        
        pd_forecast$peak[2:nrow(pd_forecast)] <-
        (pd_forecast$energy_sent_out[2:nrow(pd_forecast)] )/ (Load_factor_percentage * 8760)*100
        
        peak_demand_df <- pd_forecast
        System_peak_demand_df <- rbind(System_peak_demand_df,peak_demand_df )
        lbl = peak_demand_df$year
        vals = peak_demand_df$peak
        vals <- unname(unlist(list(vals)))
        title = paste("Computed Peak Demand Forecast  (",peak_demand_df$year[1],"-",peak_demand_df$year[length(lbl)],")" )
        db_fig <- display_line_chart(lbl, vals, "")
        l[[inc(iter)]] <- h2(title)

        l[[inc(iter)]] <- db_fig
        
      } 
      
      ##################################### Category wise sale Figure
      
      if (file.exists(file_path)){
      df <- peak_demand_df
      l[[inc(iter)]] <- h2("Cateogry Wise Sales Forecast")

      for (j in 1: length(df$year))
      {
        lbl = Categories
        curr_yr = df$year[j]

        vals = (df[df$year == curr_yr, categories_var])#/(10^9) # to convert itno MW
        vals <- unname(unlist(list(vals)))
        title = paste("Cateogry Wise Sales Forecast", curr_yr)
        l[[inc(iter)]] <- h3(title)
        l[[inc(iter)]]  <- display_pie_chart(lbl, vals, "")
      }
    }
    
       ##################################### Category wise sale Table
       if (file.exists(file_path)){
      
        dt <- round( peak_demand_df[,append(categories_var,"total_energy")],2)
        colnames(dt) <- append(Categories, "Total")
          
        rownames(dt) <- NULL
        
        l[[inc(iter)]] <- htmltools::h2("Consumer Category Wise Demand")

         l[[inc(iter)]]  <- DT::datatable(dt,filter = c("none") , options = list(dom = 't',initComplete = JS(
        "function(settings, json) {",
        "$(this.api().table().header()).css({'background-color': 'blue', 'color': 'white'});",
        "}")))
        
      }
      
      ##################################### Energy Sale vs Energy Purchase 
      
      if (file.exists(file_path)){
      peak_demand_df$energy_purchase = peak_demand_df$energy_sent_out + peak_demand_df$total_loss
      xlbl <- "Year"
      y1lbl <- "Energy Purchase (MWh)"
      y2lbl <- "Energy Sale (MWh)"
      
      title <- paste(" Energy Purchase vs Energy Sale"  )
      input_data <- peak_demand_df
      y1data<- input_data$energy_purchase
      y1data<- round(y1data/ (10 ^ 6), 2)
      
      y2data<- input_data$energy_sent_out
      y2data<- round(y2data/ (10 ^ 6), 2)
      
      xdata<- input_data$year
      
      fig <- display_bar_chart(xlbl, y1lbl,y2lbl , y2data,y1data, xdata, "")
      
      l[[inc(iter)]] <- h2(title)
      l[[inc(iter)]] <- fig
      }
      
      ##################################### Computed Forecast Table
      
      if (file.exists(file_path)){
        
        
        dt <- round(peak_demand_df[,
                                   c(
                                     "year",
                                     "energy_sent_out",
                                     "dist_loss",
                                     "dist_loss_percentage",
                                     "trans_loss",
                                     "trans_loss_percentage",
                                     "energy_purchase",
                                     "peak"
                                   )], 2)
        colnames(dt) <-
          c(
            "Year",
            "Energy Sent Out",
            "Distribution Losses",
            "Distribution Losses %",
            "Transmission Losses",
            "Transmission Losses %",
            "Energy Purchase" ,
            "Peak Demand (MW)"
          )
        rownames(dt) <- NULL
        
        l[[inc(iter)]] <-
          htmltools::h2(paste("Computed Forecast (Base Forecast)"))
        
        l[[inc(iter)]]  <-
          DT::datatable(dt,
                        filter = c("none") ,
                        options = list(
                          dom = 't',
                          initComplete = JS(
                            "function(settings, json) {",
                            "$(this.api().table().header()).css({'background-color': 'blue', 'color': 'white'});",
                            "}"
                          )
                        ))

      }
      
      
      ##################################### District Computed Forecast Table
     
      
      }

############################### System Diagrams
  l[[inc(iter)]] <- h1("System")
  sys_df<- aggregate(. ~ year, data=System_peak_demand_df, FUN=sum)
##################################### Computed Peak Demand Forecast
    
  lbl = sys_df$year
  vals = sys_df$peak
  vals <- unname(unlist(list(vals)))
  title = paste("Computed Peak Demand Forecast  (",sys_df$year[1],"-",
                      sys_df$year[length(lbl)],")" )
  db_fig <- display_line_chart(lbl, vals, "")
  l[[inc(iter)]] <- h2(title)
  l[[inc(iter)]] <- db_fig
##################################### Category wise sale Figure
{
      df <- sys_df
      l[[inc(iter)]] <- h2("Cateogry Wise Sales Forecast")

      for (j in 1: length(df$year))
      {
        lbl = Categories
        curr_yr = df$year[j]

        vals = (df[df$year == curr_yr, categories_var])#/(10^9) # to convert itno MW
        vals <- unname(unlist(list(vals)))
        title = paste("Cateogry Wise Sales Forecast", curr_yr)
        l[[inc(iter)]] <- h3(title)
        l[[inc(iter)]]  <- display_pie_chart(lbl, vals, "")
      }
}
##################################### Category wise sale Table
{

        dt <- round( sys_df[,append(categories_var,"total_energy")],2)
        colnames(dt) <- append(Categories, "Total")

        rownames(dt) <- NULL

        l[[inc(iter)]] <- htmltools::h2("Consumer Category Wise Demand")

         l[[inc(iter)]]  <- DT::datatable(dt,filter = c("none") , options = list(dom = 't',initComplete = JS(
        "function(settings, json) {",
        "$(this.api().table().header()).css({'background-color': 'blue', 'color': 'white'});",
        "}")))

}
##################################### Energy Sale vs Energy Purchase 
{
      sys_df$energy_purchase = sys_df$energy_sent_out + sys_df$total_loss
      xlbl <- "Year"
      y1lbl <- "Energy Purchase (MWh)"
      y2lbl <- "Energy Sale (MWh)"
      
      title <- paste(" Energy Purchase vs Energy Sale"  )
      input_data <- sys_df
      y1data<- input_data$energy_purchase
      y1data<- round(y1data/ (10 ^ 6), 2)
      
      y2data<- input_data$energy_sent_out
      y2data<- round(y2data/ (10 ^ 6), 2)
      
      xdata<- input_data$year
      
      fig <- display_bar_chart(xlbl, y1lbl,y2lbl , y2data,y1data, xdata, "")
      
      l[[inc(iter)]] <- h2(title)
      l[[inc(iter)]] <- fig
}
##################################### Computed Forecast Table
{
dt <- round(sys_df[,c("year",
 "energy_sent_out",
 "dist_loss",
 "dist_loss_percentage",
 "trans_loss",
 "trans_loss_percentage",
 "energy_purchase",
 "peak")], 2)
  
colnames(dt) <-c(
 "Year",
 "Energy Sent Out",
 "Distribution Losses",
 "Distribution Losses %",
 "Transmission Losses",
 "Transmission Losses %",
 "Energy Purchase" ,
 "Peak Demand (MW)")

rownames(dt) <- NULL
        
l[[inc(iter)]] <-htmltools::h2(paste("Computed Forecast (Base Forecast)"))
        
l[[inc(iter)]]  <-DT::datatable(dt,filter = c("none") ,options = list(
dom = 't',initComplete = JS("function(settings, json) {",
"$(this.api().table().header()).css({'background-color': 'blue', 'color': 'white'});",
"}")))
}        
  l    

```


```{r Category Wise Sales Chart- Base Year, echo=FALSE}
##################################### District Computed Forecast Table
      
